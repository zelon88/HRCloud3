HRCLOUD3 DEV NOTES

----------
v0.6.4 - 1/16/2021
Username modal & token generation complete. Password modal just about done.

-Implemented client-side SHA256 hashing of the supplied password before sending anything over the wire.
-Figured out AJAX issues, JQuery not loading properly.
-Reorganized scripts.
-Labelled some DOM elements, structuring the UI.
-Improved comments, especially in Javascript & HTML files.
-Fixed bugs / naming convention issues in HRC3-Lib.js.
-Need to do...
 -Work out bugs in authentication routine.
 -Complete Password modal & UI sequence.
 -Polish stylesheets.
 -Draw an outline of what the UI & landing pages should look like.

----------
v0.6.3 - 1/15/2021
More authentication work.

-Working on the UI elements responsible for logging in.
-Using jQuery & Ajax for asynchronous callback.
-So far the username portion is all done. 
  -The user clicks Login and the modal appears. 
  -They are prompted for their username. 
  -The username modal has a hidden field to request a token.
  -They submit their username. The token request is also sent.
  -The username is set and a token is generated.
  -The token must be used within 1-2 minutes or it will expire.
-More work needs to be done.
  -The token can now be passed back with a password and username for authentication.
-Improve comments.
-Fix several bugs.
  -Return for checkVersions & loadCores functions were incorrect.
  -loadCores had bugs in the error checking procedure. It returned the wrong boolean and halted the core in all cases.
-Update jQuery from v3.1.0 to v3.5.1.
-Fix 404 errors
  -meyers-reset.css
  -favicon.ico
-Update HRC2-Lib.js.
  -Improve comments.
  -Improve code readability via segmentation.
  -Add GPL header text.
  -Rename to HRC3-Lib.js.

----------
v0.6.2 - 12/24/2020
Working on authentication procedure.

-Moved some stuff between files. 
-Had to figure out a mechanism for not throwing the login screen before a user has requested it.
-Had to figure out a file structure that would result in proper HTML syntax for UI elements but proper value-only returns for ajax calls.
-Added a conditional statement to skip a large section of the core when not enough information is supplied to authenticate a user. 
-Cleaned up stylesheets. 
-Renamed a few files.
-Put in some work on header.html file. HTML syntax is looking good. Login screens are looking good. 
-The main login.html page now functions to the extent that it generates a clienttoken for the specified user. Need to implement on login popup modal also.
-Need to implement async calls for retrieving the clienttoken from core when userinput and requesttokens post inputs are supplied. This way the clienttoken can be hashed client-side with the password input for stage 2 of the login procedure.
-Login procedure will be 2 stages. Username entry, Password entry.
-In the future it would make things more scalable if there were a dropdown for region/continent/country on the username entry field. That way we don't have to iterate through a massive worldwide user list for each login attempt. We could localize this to make things more secure and faster.
-Added version checking. The core will now verify that the compatibilityCore is enabled. If it is, the version from it will be checked against the version contained in versionInfo.php. If discrepancies are found execution will be halted and a descriptive error will be raied. If the versions match the engine will continue as normal. If for any reason the compatibilityCore is disabled, the check will be skipped completely.

----------
v0.6.1 - 12/24/2020
Merry Almost Xmas! More core work.

-Getting closer and closer to testing authentication.
-Implementing features revealed some missing components (like handing users prior to a login attempt).
-Improve code comment consistency.
-Found a couple typos.

----------
v0.6 - 12/23/2020
Fixed a lot of Syntax errors, working on UI

-Fixed a lot of syntax errors. 
-Working on testing authentication. 
-Working on UI.
-Create a "Console" element in the header UI to organize core.php output prior to displaying more UI elements.

----------
v0.5.6

-I have a bunch of notes and thoughts floating around about how to structure things that I need a consolidated place for it all.
-I wasted some time yesterday re-writing code that looked wrong, but turned out to be completely fine all along.
-The 'DATA' library will be for user-specific xPress dictionaries.
-Separate dictionaries per user are the best way to ensure privacy/security at the expense of compression performance.
-Encryption should utilize user-controlled keys.
-Special functions will need to be developed in dataCore for re-encrypting and verifying files when users change their encryption keys.
-Put some kind of limit on the mechanism for re-encrypting storage, as this poses a huge DDOS risk.