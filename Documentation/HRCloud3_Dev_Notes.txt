HRCLOUD3 DEV NOTES
----------

2/19/2022
v0.8.1 - Still working on maintaining sessions.

-Working on maintaining sessions.
-Improve session handling. 

----------
2/19/2022
v0.8.0 - Still working on maintaining sessions.

-Working on maintaining sessions.
-Can now maintain a session indefinately. 

----------
2/19/2022
v0.7.9 - Still working on maintaining sessions.

-Working on maintaining sessions.
-Can now maintain a session for a short while.
-Must continue working to find the source of erroneous session expiry.
-Forgot to upload the actual code from yesterday.

----------
2/19/2022
v0.7.8 - Working on maintaining sessions.

-Working on maintaining sessions.
-Can now maintain a session for a short while.
-Must continue working to find the source of erroneous session expiry.

----------
2/16/2022
v0.7.7 - Working on maintaining sessions.

-Working on maintaining sessions with UI elements.

----------
3/12/2021
v0.7.6 - Working on guiCore, adding core functionality.

-Adding & refining functions in guiCore.php.
-I want to have widgets, apps, and files on the homepage similar to HRCloud2, but with seamless iframes that scroll to the side similar to Netflix.
  -Maybe smaller than netflix. 
  -Maybe put two side by side?
  -User can re-arrange widgets and apps and anything else.
  -Make a cache file to store the order in which items are displayed. 
  -Update this cache file when the user changes their display options.
  -Iframes sidescroll, only one object tall.
  -Iframes should be outputted via PHP functions and contained in widgets.
  -Authentication levels for widgets are coded into the widget themselves.
  -That way widgets can be made for unauthenticated users for things that don't need auth. Like converting one-time files or outputting server analytics or marketing.
-Refactored getFiles() in guiCore.php pretty heavily.
-Add Applications and Widgets folders to verifyInstallation() in core.php.
-Need to add code in core.php to create a cache file to store the order that guiElements are displayed in.
  -This code should probably go in the same area as notifications file generation. 
  -Maybe tuck it inside the generateUserCache() function?
-Cleanup lingering files from last nights big GUI / HTML file move.

----------
3/11/2021
v0.7.5 - UI Playground time!

-Fix bug on line 442 in core.php. By design the core was returning old server and client tokens when old ones were supplied. 
  -This guaranteed that sessions would expire after a few minutes. Now when old input tokens are validated, new ones are returned.
-Start shaping guiCore. Use core.php as a guideline.
-Refactor some of the existing guiCore functions.
-I think I want to have semi-static html files in a subfolder of /Resources.
  -This way the UI will be completely modular.
  -Each .html file in the /Resources/Themes folder can be wrapped in a PHP conditional that controls when and which html code actually gets displayed.
-Add missing and new errors to Error_Descriptions.txt.
-Fix bug in Login-Caller.js that would make logging in impossible if your username is "ERROR".
-Add mechanism to set default values to generated user cache files before first logon. 
  -Moved defaults from hardcoded array values in core.php to config.php where they belong.
-Changed default value of StayLoggedIn to ENABLED since it is so pivotal to the whole entire authentication mechanism.
-Fix bug in initializeVariables() causing "Warning: Illegal offset type" when it hit a multidimensional array in $UserCacheRequiredOptions.
-Improve documentation included in config.php.
-Refactor to make add-in Themes possible. Move all GUI elements to /Resources/Themes/DEFAULT

----------
3/10/2021
v0.7.4 - Finish automated token submission, fix login UI elements.

-Sessions are now 100% self-sustaining once the user logs in, if StayLoggedIn is enabled.
-Redesigned success/failure modals and how they are displayed.
-Sleep function can only be used within async functions. 
-There are several loops during the login process.
  -The first one happens in getClientTokens() when a user requests to login by sending a Username to the core.
    -This loop is required to obtain the password for the user attempting to login so it can be used to calculate tokens.
    -If the Username supplied to the core is invalid, a fake ClientToken is returned that will not work for any user.
    -If the Username supplied to the core is valid, the ClientToken for that user is returned.
    -The user takes ClientToken and ServerToken and sends it back to core with their password.
  -Once tokens AND credentials have been supplied to core, generateTokens() loops through all users and validates supplied tokens.
    -If supplied tokens are valid; execution continues.
    -If supplied tokens are not valid; execution is deferred and tokens are replaced with garbage.
  -Once tokens have been validated authenticate() loops through all users and validates the supplied password.
    -If supplied credentials are valid; execution continues and the users UI is populated with a hidden form containing login data.
    -If supplied credentials are not valid; execution is deferred and sensitive memory is null'ed and unset.
    -Now that the user has logged in they submit their hidden login data with every request.
  -Continued requests trigger a loop in verifySession() which is called by verifyGlobals() to iterates through the userlist to calculate the SessionID for the supplied user.
    -If the SessionID supplied is valid, further authentication is deferred.
-Moved a lot of stuff around in header.html and Login-Caller.js.

----------
3/5/2021
v0.7.3 - Fix user cache creation / loading, fix client-side token caching.

-Client side token caching was broken.
-Redesigned the way user input and tokens are passed between login modals.
-Added $UserEmail & $SessionID default values initialized to FALSE in authenticate() function.
-Temporarily disable javascript for StayLoggedIn until I can work out the async/await.

----------
3/4/2021
v0.7.2 - Implement "StayLoggedIn" feature. 

-Implement "StayLoggedIn" function.
-StayLoggedIn works by caching a user token on the current page in hidden input fields. 
-When "StayLoggedIn" is enabled in the user cache file ($UserOptions array), these hidden fields are POSTed to the server every 30 seconds and a new token is cached.
-"StayLoggedIn" feature is disabled by default.
-Added initializeVariables() function for doing just that. It initialized required variables early in the core.php startup process so that undefined errors do not occur when UI elements send funky requests.
-Change error numbers, modify documentation to in Error_Descriptions.txt to reflect changes.
-The "StayLoggedIn" hidden form field located on header.html also doubles as the cache for non-automated requests. 
-Once a user is logged in the token is stored in the "tokens" form in header.html so it can be resent with manual client requests.

----------
2/22/2021
v0.7.1 - Working on maintaining sessions.

-Added an extra modal to the login process announcing a successful login.
-Fixed PHP bugs causing problems during authentication.
-Fixed AJAX bugs causing bad response parsing of password results.
-I hate stylesheets. Trying to figure out why there are no borders around my login fields & buttons is a PITA.

----------
2/20/2021
v0.7 - Working on JS/Ajax.

-There is some bug in the Ajax that I am trying to track down.
-The bug prevents the success code from running in the Ajax that is intended to submit the password data.

----------
1/20/2021
v0.6.9 - Session generation is complete! 

-Sessions are now created and can be held by the core once a user has authenticated.
-Authentication works. If a user enters an incorrect password the core does not authenticate them.
-If a user enters the correct password they are logged in and a sessionID is returned by the core.
-Need the UI to capture and reimplement the tokens that the core generates.
-Need to better define user cache behaviour. 
 -I want it to stay in /var/www/html as a PHP file because it will be guaranteed to be on the local server.
 -In a multi-server installation it would make it a lot easier to control throughput geographically. 
 -We need a way to divide the userlist by geographic location and then sync user cache files between the DATA library and the local server serving the request.
 -I don't think it will be a problem to implement, so we can continue testing with the current cache environment for now.
 -Keep in mind if complexity gets too high that we still need to add more features.
-User log generation works.
-Added more Errors descriptions to Documentation\Error_Descriptions.txt.

----------
1/19/2021
v0.6.8 - Working on session control. Added user logging capability.

-The programmer now has the choice of adding logs and errors to a user directory of the Data library.
-Added a function for checking that a library is active.
-Added a function for securing sensitive memory after authentication.
-Roughed out a routine to pass authentication straight into session creation to remove the need for refresh.
 -Has bugs, blocks authentication now.
-Put our first piece of data into a library programmatically! 
-The user logs process should be a good rough draft for accessing & manipulating data within a library.

----------
v0.6.7 - 1/18/2021
Working on session creation & control.

-Now that the login procedure is done we need a way to hold onto a session without resending credentials every time.
-The verifyGlobals() function has changed a lot to accomodate this.
-There is not a verifySession() function which will take in a SessionID either from POST request or from SESSION variable and validate it.
-Sessions work like this...
 -A user submits a correct username / password combination and is given a SessionID.
 -The user navigates the application. Every time they load a page the SESSION ID and clienttoken is either posted in with their request or it is held in PHPs global SESSION variable.
 -The SessionID is validated against the users credentials and if it is authentic and not expired it is treated like a password.
 -Every time the user submits a request they are given another client token and sessionID.
 -Unique per-user Client tokens and SessionIDs are generated every 60 seconds.
 -Tokens are valid for a dynamic duration between 60 and 120 seconds, depending on when they submitted their last token.
 -If a user submits a valid ClientToken and SessionID they will not have to enter a password. 
-I have a thought about how to enable variable exiration durations on SessionIDs and ClientTokens but I want to get the core functionalit down first.
-The SessionID is a hash of the salts, userID, password, server token, and client token, and time. It is unique to every user.
-Moved the Dev_Notes text file to the new Documentation directory.

----------
v0.6.6 - 1/18/2021
Fixing bugs, adding documentation.

-Pruned authenticate() function. 
-Changed from implied token input to ClientTokenInput in authenticate() function.
-Add Documentation folder with Error_Descriptions.txt file declaring the errors HRCloud3 makes and what they mean.
-Not done adding errors, but the ones with well defined functinoality are present.
-Add more as error handling functionality is tested and becomes solidified.
-Added the first screenshot and Screenshots folder.

----------
v0.6.5 - 1/18/2021
Authentication is functional & encrypted!

-Authentication works now. It is fully encrypted.
-Worked out lots of bugs in the server-side authentication routine.
-Worked out bugs in token generation.
-Worked out bugs in library filtering, library data loading.
-Currently need to review user cache generation routine.
-Still wondering why borders disappeared in stylesheets.

----------
v0.6.4 - 1/16/2021
Username modal & token generation complete. Password modal just about done.

-Implemented client-side SHA256 hashing of the supplied password before sending anything over the wire.
-Figured out AJAX issues, JQuery not loading properly.
-Reorganized scripts.
-Labelled some DOM elements, structuring the UI.
-Improved comments, especially in Javascript & HTML files.
-Fixed bugs / naming convention issues in HRC3-Lib.js.
-Need to do...
 -Work out bugs in authentication routine.
 -Complete Password modal & UI sequence.
 -Polish stylesheets.
 -Draw an outline of what the UI & landing pages should look like.

----------
v0.6.3 - 1/15/2021
More authentication work.

-Working on the UI elements responsible for logging in.
-Using jQuery & Ajax for asynchronous callback.
-So far the username portion is all done. 
  -The user clicks Login and the modal appears. 
  -They are prompted for their username. 
  -The username modal has a hidden field to request a token.
  -They submit their username. The token request is also sent.
  -The username is set and a token is generated.
  -The token must be used within 1-2 minutes or it will expire.
-More work needs to be done.
  -The token can now be passed back with a password and username for authentication.
-Improve comments.
-Fix several bugs.
  -Return for checkVersions & loadCores functions were incorrect.
  -loadCores had bugs in the error checking procedure. It returned the wrong boolean and halted the core in all cases.
-Update jQuery from v3.1.0 to v3.5.1.
-Fix 404 errors
  -meyers-reset.css
  -favicon.ico
-Update HRC2-Lib.js.
  -Improve comments.
  -Improve code readability via segmentation.
  -Add GPL header text.
  -Rename to HRC3-Lib.js.

----------
v0.6.2 - 12/24/2020
Working on authentication procedure.

-Moved some stuff between files. 
-Had to figure out a mechanism for not throwing the login screen before a user has requested it.
-Had to figure out a file structure that would result in proper HTML syntax for UI elements but proper value-only returns for ajax calls.
-Added a conditional statement to skip a large section of the core when not enough information is supplied to authenticate a user. 
-Cleaned up stylesheets. 
-Renamed a few files.
-Put in some work on header.html file. HTML syntax is looking good. Login screens are looking good. 
-The main login.html page now functions to the extent that it generates a clienttoken for the specified user. Need to implement on login popup modal also.
-Need to implement async calls for retrieving the clienttoken from core when userinput and requesttokens post inputs are supplied. This way the clienttoken can be hashed client-side with the password input for stage 2 of the login procedure.
-Login procedure will be 2 stages. Username entry, Password entry.
-In the future it would make things more scalable if there were a dropdown for region/continent/country on the username entry field. That way we don't have to iterate through a massive worldwide user list for each login attempt. We could localize this to make things more secure and faster.
-Added version checking. The core will now verify that the compatibilityCore is enabled. If it is, the version from it will be checked against the version contained in versionInfo.php. If discrepancies are found execution will be halted and a descriptive error will be raied. If the versions match the engine will continue as normal. If for any reason the compatibilityCore is disabled, the check will be skipped completely.

----------
v0.6.1 - 12/24/2020
Merry Almost Xmas! More core work.

-Getting closer and closer to testing authentication.
-Implementing features revealed some missing components (like handing users prior to a login attempt).
-Improve code comment consistency.
-Found a couple typos.

----------
v0.6 - 12/23/2020
Fixed a lot of Syntax errors, working on UI

-Fixed a lot of syntax errors. 
-Working on testing authentication. 
-Working on UI.
-Create a "Console" element in the header UI to organize core.php output prior to displaying more UI elements.

----------
v0.5.6

-I have a bunch of notes and thoughts floating around about how to structure things that I need a consolidated place for it all.
-I wasted some time yesterday re-writing code that looked wrong, but turned out to be completely fine all along.
-The 'DATA' library will be for user-specific xPress dictionaries.
-Separate dictionaries per user are the best way to ensure privacy/security at the expense of compression performance.
-Encryption should utilize user-controlled keys.
-Special functions will need to be developed in dataCore for re-encrypting and verifying files when users change their encryption keys.
-Put some kind of limit on the mechanism for re-encrypting storage, as this poses a huge DDOS risk.