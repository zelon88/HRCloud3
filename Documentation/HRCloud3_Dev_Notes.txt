HRCLOUD3 DEV NOTES
----------

4/10/2022
v0.9.6 - Added Forgot Password modal.

-Added Forgot Password modal. 
-Need to add core functionality.
-By using the ClientToken generated in the username collection process we can make the auto-expiring requests.
-We should still manually record and compare the timestamp of the request,
-Added most UI functionality for the first portion of Forgot Password process. 

----------
4/10/2022
v0.9.5 - Tidying up existing processes, fixing bugs.

-Fixed a bug where the Create Account form would be unreachable after creating one account.
-Added red outline to most form fields when they are empty and the form is submitted.
-Added dynamic "require" attribute to certain text fields to enable default browser functionality when these are blank.
  -Will eventually have to go through and consolidate the JS in login-caller.js. 
  -Maybe move to a separate file & just leave AJAX in login-caller.js?
-Added several "cancel" functions to Login-Caller.js for resetting form fields when a process is abandoned by the user.
-Fixed new user account User ID collisions.
-Fixed a bug in the way the PostConfigUser cache file was being written. 
  -The array was malformed.
-Existing cache files will need to be replaced.
-Existing user accounts created through the UI must be discarded.
  -It is a good thing this is a very early prototype and there aren't any other features yet.
-Fixed a bug where the user cache was not being put into a subdirectory.
  -The UserID was not being properly defined during existing sessions (continued sessions).
  -Now the UserID is properly defined in verifyGlobals() by verifySession().
  -An extra check was added to verifyUserEnvironment() to ensure that the UserID is valid before any filesystem operations are performed.
  -Added ERROR 37!
    -The UserID is not valid!
-Started working on Forgot Password Modal.
-Added functions for checking/unchecking checkboxes to HRC3-Lib.js.

----------
4/8/2022
v0.9.4 - Working on forgot / recover password process.

-I want the recoverPassword cache file to contain several important pieces of information.
  -The timestamp of the request,
  -The recovery code provided to the user,
  -Unique user identifier.
  -A counter, initialized to zero.
-The recoverPassword proess should only be allowed to take place if:
  -The same user device that made the request is the one that entered the recovery code (enable/disable in config.php).
  -The user has not made more than 5 attempts to enter the recovery code correctly (set exact number of tries in config.php).
  -The recovery code expires in 3 minutes (set number of seconds in config.php).
  -The recovery ccode should expire after 2 correct guesses.
    -One when the user checks that it is true to unveil the reset password UI.
    -And again when they fill out the reset password UI and submit it to the core.
    -After these two successful uses the file should be deleted so it cannot be reused.
-The process will go;
  -The user enters a username.
  -The user selects Forgot Password button.
  -The user clicks the "Send Recovery Code" button.
  -This feature should allways return "approved" unless there was a technical email related problem.
  -If this function returns an error just because the user email doesn't exist then this could be abused to enumerate the user list.
  -The user checks their email and enters the code into our UI.
  -If the code is corect a special modal opens where they can reset their password.
  -They submit the recovery code again, along with new password information. 
  -The core updates the password and deletes the cache file.
  -The user still has to log in using the new password.
    -Creating a special login process for this would be an attack vector I don't want to have to maintain.
    -The engine has one authentication path. That is the only maintainable way to do authentication.
-Moved detectUserInfo() function from adminCore.php to core.php.
-Fixed typos in adminCore.php ($emmailData to $emailData).
-Updated error messages.
  -Removed ERROR 35 and replaced it with what used to be ERROR 39.
  -Removed ERROR 35 and 36.
  -Moved all errors above 36 down to fill in the gap.
  -By removing some of these errors we now generate a recovery email for email addresses that have no accounts.
  -This reduces confusion.
  -This does not threaten to enumerate the user list.
  -The errors were still useful during the development phase, so not a total loss.

----------
4/7/2022
v0.9.3 - Working on Forgot ... everything ... process.

-Adjust SMTP / Email related config.php variables a bit.
-Added ERROR 34!
  -Could not send a Username Recovery Email.
-Added ERROR 35!
  -Could not gather a list of accounts for the supplied email address!
-Added ERROR 36!
  -Could not craft a recovery email!
-Added ERROR 37!
  -Could not verify the user environment! (core.php)
-Added ERROR 38!
  -Could not verify the user environment! (adminCore.php)
-Continue developing the logic for sending emails & handling exceptions using PHPMailer dependency.
-Added an event listener for keypresses (actually, keyup) in Login-Caller.js
  -This can be used to handle keystrokes.
  -Added 'Escape' key handler which closes all open modals.
-I am thinking about how to do Forgot Password Requests.
  -I think I want to have a modal with a text box for entering a recovery code, and a button for sending a recovery code email.
  -Because the button to display Forgot Password is on the PasswordModal where we already know the username.
  -If the user has a code or has just received their code, they can enter and submit it.
  -If the user has not yet entered or received a code the button to send one is already visible.
  -This method makes the features available to the user initially, and doesn't require a lot of JS to work.
  -There aren't many moving pieces, which is a plus.
  -We will need to generate a recoveryCache.php file of some sort to the user data directory.
  -This will contain the time of the request and the recovery code.
  -We need logic to generate and expire these recoveryCache.php files.
-In order to make Recover Password work, we will need to create a cache file in the user data directory.
  -That means that there is an edge case where a user could run into an error if they recover a password for an account that has never been logged in.
  -The user data directory is created and/or validated on user authentication. 
  -To fix this I took the code for creating a user dir, logs, cache, & notifications file out of the core.php logic section & wrapped it in a function.
  -Now we can call this function whenever a user is authenticated & also in adminCore.php when a user is added.
  -Any users added through the UI that have not logged in will still experience problems with this feature. 
  -These problem users should be deleted to avoid problems. Maybe an "unactivated" user process will take shape someday.

----------
3/31/2022
v0.9.2 - Working on Forgot Username process.

-Fixed Available Dependency check in loadDependency() function.
  -I forgot to implement the check entirely!
  -Implemented without even increasing the LOC count!
-Fix typo in setFocus() JS function in HRC3-Lib.js (was ironically being called getFocus() instead).
-Update jquery-3.5.1.min.js to jquery-3.6.0.min.js.
-Working on structure of forgotUsername process in adminCore.php.
  -Added a bunch of recovery email related functions.
-The formatting for form elements in header.html is below;
          <img id='' class='' name='' src='' alt=''>
          <img id='' class='' name='' src='' alt='' title='' onclick=''>
          <img id='' class='' name='' src='' alt='' title=>
          <div id='' class='' name='' style=''>
          <input type='password' placeholder='' id='' name='' title='' style='' required>
          <input type='hidden' id='' name='' value='' required>
          <button type='' id='' class='' name='' onclick='' title='' style=''>
-Added $EnforceHTTPS entry to config.php to have the application refuse to respond to requests over unencrypted channels.
-Added ERROR 33.
  -Could not verify connection!

----------
3/30/2022
v0.9.1 - Working on Forgot Username process.

-Removed parenthesis from return statements per PHP community best practices. 
-Adjusted the starting UserID for the addUser() function to 1000.
  -This means that up to 100 users can be specified in config.php.
  -Before adminCore.php would count the number of users defined in config.php and start incrementing new accounts from there.
  -This works as long as the config.php $Users array is never modified. 
  -If a user is added in config.php, the old style would mean that there would be a UserID collision.
  -By starting the UserID counter at 1000, we can safely add or remove up to 1,000 users in config.php before running into collisions.
-Started working on Username Recovery. 
  -Added the Forgot Username Modal to header.html.
  -Added some logic to core.php.
-Added piecemeal PHPMailer components that we need to /Dependencies/PHPMailer.
  -Added Error 31.
    -"Could not load PHPMailer!"
  -I like that PHPMailer can send email without having an SMTP server defined.
  -Working on including/wrapping PHPMailer v6.6.0.
  -Added a bunch of email related configuration variables to config.php.
  -Added a log entry to contain errors generated by PHPMailer.
    -"Email failed to send! PHPMailer failed with error: <PHPMAILER_ERROR_INFO>"
    -This was originally a dieGracefully() instead of a logEntry() but I don't want this function to be execution blocking on failure.
    -That decision should be up to the calling code instead.
  -Added Error 32.
    -Could not load the admin core file fiile (adminCore.php)!
  -Created an $AvailableDependencies array in config.php and a loadDependency() function and a Dependencies directory.
    -I originally wrote a function specifically for loading PHPMailer, but that is a very WET way to do things.
    -A more DRY approach is to have a function that validates that a dependency should be loaded and is properly installed.
    -I can easily reuse this function in the future and the syntax for doing so will already be established.
    -Also adds a layer of security because if a dependency is not specified in config.php it will not be loaded even if called correctly.
    -This will complicate simple code injection vectors by requiring config.php modifications before funtion can be abused.

----------
3/24/2022
v0.9.0 - Finishing up New Account Creation process.

-Added ERROR 27 in core.php and to Error_Descriptions.txt.
  -"Could not initiate a new account request!"
-Improved logging when Verbosity is enabled.
-Moved some logic around towards the bottom of core.php to improve readability & consistency.
-Created createAccount() function in adminCore.php.
-Adjusted flow (by moving brackets) so the New Account process only takes place after the Username Availability Request process.
  -This way we can be sure that adminCore is loaded and all required variables are set.
-Remove loop in loadCache() function that would hash unhashed passwords from config.php.
  -Unhashed passwords in config.php hasn't been supported for soome time, so this code was a useless relic anyway.
-Modified Login-Caller.js and adminCore.php so that only sanitized usernames are processed by the core and returned by the UI.
  -The user can submit whatever they want, but the core will sanitize it and only process the sanitized result.
  -The UI will return results for the sanitized result, NOT the username given by the user.
  -The UI will be updated to reflect any adjustments made to the username by the core.
-Implement the sanitize() function in the verifyGlobals() function to improve readability and WET code with DRY code.
  -This has the advantage of adding type checking to all inputs.
  -Also moved the trim() function from the end of the sanitization statement to the beginning.
  -What was happpening was the input was trimmed, then characters replaced.
  -This had the unintended effect of occasionally adding whitespace at the end of sanitized strings.
  -By removing characters before the trim() function we ensure that all whitespace was actually removed.
-Removed Last_Session_ID from the $Users array.
  -This would be better suited to the individual users cache file or DATA directory.
  -Updating the Users cache file everytime a session ID changes is a lot of file modifications and a lot of data.
  -Maybe we can key off of a blank session ID parameter to determine when a user account has never been logged into.
-Added ERROR 28 in core.php and Error_Descriptions.txt.
 -"The specified user account is disabled!""
-Improved sanitization of logEntry() and dieGracefully() functions.
-Added PHP_EOL, DIRECTORY_SEPARATOR, and FILE_APPEND flag detection to improve PHP version/environmental compatibility between systems.
-Added a unique $RequestID to log files to distinguish between indiviual requests being processed.
  -Makes surfing logs much easier.
  -The $RequestID is calculated in the verifyDate() function.
  -Putting the $RequestID in verifyDate() means that it's already defined when we go to use logEntry() or dieGracefully().
-Adjusted the format of the $Users array in config.php so that it is indexed with the $UserID as the key.
-Added newlines to the end of core several output sequences.
  -Now it's easier to read the response when HRC3 outputs data along with an error message.
  -Before the error and data would be mushed together with no whitespace.
-Added ERROR 29 in core.php and to Error_Descriptions.txt.
  -"Could not create the desired user account!"
-Added ERROR 30 in core.php and to Error_Descriptions.txt.
  -"Could not update the cache file!"
-Replaced ERROR 14 in core.php.
  -"Could not create the desired user account!"
-Strengthened Client Token validation.
  -Improved the checks that determine when a token is valid.
  -Fix a bug that meant usernames that do not exist do not return a client token.
    -Now fake tokens will be returned instead, to prevent username enumeration.
-Oh my God, it is 2:30am and I just logged into an account I created completely with the UI for the first time.
  -The only thing I really don't like is that there will be really clean no way to update the $Users array in config.php after you start adding postConfigUsers.
  -You would need to reindex both arrays for that to work.
  -I think a better solution is to block off the first 10 user IDs specifically for config users.

----------
3/18/2022
v0.8.9 - Workin on New Account Creation process.

-Streamlined the Username Availability Request code in core.php
  -The code to trigger the request is now non-blocking when a NewUserRequest is also in process.
  -The code to trigger the request is now more consistent with the rest of the logic code in core.php.
-Offloaded some code to adminCore.php.
  -Specifically the code to display the results which now lives in the respondUserAvailabilityRequest() function.
  -To avoid the function being used maliciously, it takes no input from arguments. Only global variables. 
  -Also added an argument to the checkAvailability() function to determine if results should be displayed.

----------
3/18/2022
v0.8.8 - Workin on Login/Register/Modals UI elements.

-Cleaned up the design system a little bit, improve consistency across modals.
-Eventually we will probably have to write a "modal generator" for dynamicly creataed modals.
-Added animations to the create account modals. 
  -When a username is available the modal expands and the remaining form elements woosh into view.
-Added blank form valiidation to NewUserInput on client side.
-Added blank response handling to password modal jquery code in Login-Caller.js.
-Made it so the password modal no longer disappears on incorrect password responses.
  -This makes logging in more convinient as a false password no longer has to reclick login and reenter username.
-Added Privacy Policy and Terms Of Service links to all login boxes that accept user input.
  -TOS and PP links are defined in config.php.
  -By default config.php points to Terms_Of_Service.txt and Privacy_Policy.txt located in the Documentation directory.
  -These text files can be replaced with HTML if desired, just remember to update config.php with the new location.
  -The Terms_Of_Service.txt and Privacy_Policy.txt files that come with this application so far are blank placeholders.
  -Remember to modify these text files to paste in the actual TOS and PP for your organization!
-Thinking about limiting the number of login attempts (password entry) in the same way as limited username availability requests.
  -Still on the fence.
-Added config.php variables to control the time threshold and hit threshold for the User Availability Request process.
  -This will allow organizations with fleets of identical computers to raise the thresholds as required to avoid getting errors.
  -Initially the thresholds were hard coded until all the bugs were worked out, then I made them strings in the config file.
  -But then I realized there were a bunch of strings, and everything else uses arrays (like $Salts for example). 
  -So I reformatted the strings in config.php to arrays instead and I am much more happy with the result.
  -It is my only hope that regular users will understand the intent, as it sounds complicated when you put it on paper but the idea is simple.
-Added PHP code to header.html that will remove the Create Account process from the UI when the $AllowUserRegistration variable is set to FALSE.
-Need to focus on creating the rest of the Create Account logic.

----------
3/17/2022
v0.8.7 - Finally have working Username Availability Requests!

-The username availability cach/approve/check procedure works. 
-Users who request too many usernames too quickly will find that their request is denied.
-There are three responses the server can make to a properly crafted Username Availability Request.
  -AVAILABLE
  -NOT AVAILABLE
  -DENIED
-If the username is blank the core will simply not respond. 
  -The Username Availability Request process will not even start at the core level, in core.php. 
  -This made me go back and modify the authenticate() to deny blank userrnames as a matter of policy.
-Javascript validation should be done in the UI to make sure a blank username isn't submitted by accident.
-Once the request is complete the application stops executing more code, to reduce exposure to compromise.
-Now I just need to incorporate the response into the UI.
-I also want to finish getting the TOS/Privacy Policy links from config.php onto the login modal dynamically. 
-That is probably going to ben next, after the new account request process is complete.
-Forgot to increment the versionInfo.php and compatibilityCore.php files last time, my bad.
-This has the downside of not being able to distinguish between multiple different users coming from identical machines.
  -Like a school or large organization.
  -I think the best way to fix this is with adjustable duration variables in config.php.
  -If we rely on anything that comes from the header we open oursselves up for user spoofing or crafted requests/cache file.

----------
3/15/2022
v0.8.6 - Working on Username Availability Cache & Checks.

-Things are getting fun because there are a lot of core files in the oven, so to speak. 
-It's like Thanksgiving, but for code!
-Added $RawTime variable to verifyDate() which contains the time in seconds since Unix epoch.
-Added error messages & documentation for ERROR 18, 19, & 20.
-Added a bunch of functions to adminCore.php, dataCore.php, and core.php.
-Have figured out good code structure for detecting/bringing up a new core.
-Added checkLibraryStatus() function to core.php for quickly determining the status of a given library by name.
-checkLibraryStatus() is more comprehensive than libCheck() but not as fast.
-Added error messages for out-of-context core execution.
-Added some JS to adjust the modal header text to be more appropriate when logging out. This will prove useful later.
-Added $UsernameAvailabilityRequest and $DesiredUsername return values to the verifyGlobal() function to accomodate username requests.
-The code in dataCore.php and especially adminCore.php is pretty rough at the moment and probably have syntax errors.
-Moved Login-Caller.js from the Resources directory to Resources/Themes/DEFAIULT, considering it contains a lot of theme-specific code.
-Login-Caller.js still has a lot of re-usable code for other themes, mainly the name of HTML elements.
-Maybe I should break Login-Caller down again? Maybe the Login-Caller.js in the Themes folder should only contain Theme specific code?
-Maybe everything that is left could be stuffed in HRC3-Lib.js or another UI-centric file that is non-theme dependant.
-Maybe Login-Caller.js should be renamed now that it is in the Themes folder. 

----------
3/14/2022
v0.8.5 - Working on New User Account Creation process.

-Working on UI for New User Registration.
-Need to add user creation logic to adminCore.php
-We need a mechanism to track number of requests in a short time period and deny users who abuse the check availability feature.
-I'm thinking a php cache file that contains an array with index of timestamp->client_IP. 
  -Each entry in the array is a usernname availability check.
-Before a check is made the array is loaded and old entries are scrubbed.
-Remaining entries are tallied and if the requesting IP has greater than X requests then do not conduct the availability check.
-This will limit the number of checks that one client can perform.
-Added  $AllowUserRegistration  config variable to config.php for allowing/disallowing visitors creating new accounts on their own.
-Add config entries for Privacy Policy and Terms Of Service files in config.php for storing an organizations policies that the UI can display.
-Removed 'Data' folder from $RequiredDirs and also deleted it from the repo.
-Revise $LastMinute & $NextMinute detection & accomodation.

----------
2/21/2022
v0.8.4 - Working on UI.

-Added a bunch of icons from iconarchive.
-Refined the login modals, header HTML.
-Added a bunch of tooltips to the login process.
-Added warning, error, checkmark icons to the top-left corner of some modals.
-Different modals should have relevant icons for their top-left corner. The avatar is for profile-related modals.
-Need to come up with a methodology modal generation (what triggers them), and when to use them over other methods.
-I plan on using the modals for the user registration process, account recovert as well as error messages.
-Maybe procedurally generate the modals?

----------
2/21/2022
v0.8.3 - Working on UI.

-Working on login UI.
-Tweaking buttons, styles, flow.
-Renamed 'loginModalStyles.css' to 'modalStyles.css' because I plan to use the modals for more than just login purposes.

----------
2/20/2022
v0.8.2 - Working on UI elements.

-Working on CSS.
  -CSS being done can either be left in-place as a baseline default, or incorporated into the DEFAULT theme.
  -The advantage to leaving it in-place is that functionality will be included for other theme developers.
  -The disadvantage is it is kind-of messy.
  -Will need to think on this more.
-Working on Javascript structure.
-Need to eventually do something clever to enable custom fonts.

----------
2/19/2022
v0.8.1 - Still working on maintaining sessions.

-Working on maintaining sessions.
-Improve session handling. 

----------
2/19/2022
v0.8.0 - Still working on maintaining sessions.

-Working on maintaining sessions.
-Can now maintain a session indefinately. 

----------
2/19/2022
v0.7.9 - Still working on maintaining sessions.

-Working on maintaining sessions.
-Can now maintain a session for a short while.
-Must continue working to find the source of erroneous session expiry.
-Forgot to upload the actual code from yesterday.

----------
2/19/2022
v0.7.8 - Working on maintaining sessions.

-Working on maintaining sessions.
-Can now maintain a session for a short while.
-Must continue working to find the source of erroneous session expiry.

----------
2/16/2022
v0.7.7 - Working on maintaining sessions.

-Working on maintaining sessions with UI elements.

----------
3/12/2021
v0.7.6 - Working on guiCore, adding core functionality.

-Adding & refining functions in guiCore.php.
-I want to have widgets, apps, and files on the homepage similar to HRCloud2, but with seamless iframes that scroll to the side similar to Netflix.
  -Maybe smaller than netflix. 
  -Maybe put two side by side?
  -User can re-arrange widgets and apps and anything else.
  -Make a cache file to store the order in which items are displayed. 
  -Update this cache file when the user changes their display options.
  -Iframes sidescroll, only one object tall.
  -Iframes should be outputted via PHP functions and contained in widgets.
  -Authentication levels for widgets are coded into the widget themselves.
  -That way widgets can be made for unauthenticated users for things that don't need auth. 
    -Like converting one-time files or outputting server analytics or marketing.
-Refactored getFiles() in guiCore.php pretty heavily.
-Add Applications and Widgets folders to verifyInstallation() in core.php.
-Need to add code in core.php to create a cache file to store the order that guiElements are displayed in.
  -This code should probably go in the same area as notifications file generation. 
  -Maybe tuck it inside the generateUserCache() function?
-Cleanup lingering files from last nights big GUI / HTML file move.

----------
3/11/2021
v0.7.5 - UI Playground time!

-Fix bug on line 442 in core.php. By design the core was returning old server and client tokens when old ones were supplied. 
  -This guaranteed that sessions would expire after a few minutes. Now when old input tokens are validated, new ones are returned.
-Start shaping guiCore. Use core.php as a guideline.
-Refactor some of the existing guiCore functions.
-I think I want to have semi-static html files in a subfolder of /Resources.
  -This way the UI will be completely modular.
  -Each .html file in the /Resources/Themes folder can be wrapped in a PHP conditional that controls the html code that gets displayed.
-Add missing and new errors to Error_Descriptions.txt.
-Fix bug in Login-Caller.js that would make logging in impossible if your username is "ERROR".
-Add mechanism to set default values to generated user cache files before first logon. 
  -Moved defaults from hardcoded array values in core.php to config.php where they belong.
-Changed default value of StayLoggedIn to ENABLED since it is so pivotal to the whole entire authentication mechanism.
-Fix bug in initializeVariables() causing "Warning: Illegal offset type" when it hit a multidimensional array in $UserCacheRequiredOptions.
-Improve documentation included in config.php.
-Refactor to make add-in Themes possible. Move all GUI elements to /Resources/Themes/DEFAULT

----------
3/10/2021
v0.7.4 - Finish automated token submission, fix login UI elements.

-Sessions are now 100% self-sustaining once the user logs in, if StayLoggedIn is enabled.
-Redesigned success/failure modals and how they are displayed.
-Sleep function can only be used within async functions. 
-There are several loops during the login process.
  -The first one happens in getClientTokens() when a user requests to login by sending a Username to the core.
    -This loop is required to obtain the password for the user attempting to login so it can be used to calculate tokens.
    -If the Username supplied to the core is invalid, a fake ClientToken is returned that will not work for any user.
    -If the Username supplied to the core is valid, the ClientToken for that user is returned.
    -The user takes ClientToken and ServerToken and sends it back to core with their password.
  -Once tokens AND credentials have been supplied to core, generateTokens() loops through all users and validates supplied tokens.
    -If supplied tokens are valid; execution continues.
    -If supplied tokens are not valid; execution is deferred and tokens are replaced with garbage.
  -Once tokens have been validated authenticate() loops through all users and validates the supplied password.
    -If supplied credentials are valid; execution continues and the users UI is populated with a hidden form containing login data.
    -If supplied credentials are not valid; execution is deferred and sensitive memory is null'ed and unset.
    -Now that the user has logged in they submit their hidden login data with every request.
  -Continued requests trigger a loop in verifySession() which is called by verifyGlobals() to iterate through the userlist to calculate the SessionID for the supplied user.
    -If the SessionID supplied is valid, further authentication is deferred.
-Moved a lot of stuff around in header.html and Login-Caller.js.

----------
3/5/2021
v0.7.3 - Fix user cache creation / loading, fix client-side token caching.

-Client side token caching was broken.
-Redesigned the way user input and tokens are passed between login modals.
-Added $UserEmail & $SessionID default values initialized to FALSE in authenticate() function.
-Temporarily disable javascript for StayLoggedIn until I can work out the async/await.

----------
3/4/2021
v0.7.2 - Implement "StayLoggedIn" feature. 

-Implement "StayLoggedIn" function.
-StayLoggedIn works by caching a user token on the current page in hidden input fields. 
-When "StayLoggedIn" is enabled in the user cache file ($UserOptions array), these hidden fields are POSTed to the server every 30 seconds and a new token is cached.
-"StayLoggedIn" feature is disabled by default.
-Added initializeVariables() function for doing just that. It initialized required variables early in the core.php startup process so that undefined errors do not occur when UI elements send funky requests.
-Change error numbers, modify documentation to in Error_Descriptions.txt to reflect changes.
-The "StayLoggedIn" hidden form field located on header.html also doubles as the cache for non-automated requests. 
-Once a user is logged in the token is stored in the "tokens" form in header.html so it can be resent with manual client requests.

----------
2/22/2021
v0.7.1 - Working on maintaining sessions.

-Added an extra modal to the login process announcing a successful login.
-Fixed PHP bugs causing problems during authentication.
-Fixed AJAX bugs causing bad response parsing of password results.
-I hate stylesheets. Trying to figure out why there are no borders around my login fields & buttons is a PITA.

----------
2/20/2021
v0.7 - Working on JS/Ajax.

-There is some bug in the Ajax that I am trying to track down.
-The bug prevents the success code from running in the Ajax that is intended to submit the password data.

----------
1/20/2021
v0.6.9 - Session generation is complete! 

-Sessions are now created and can be held by the core once a user has authenticated.
-Authentication works. If a user enters an incorrect password the core does not authenticate them.
-If a user enters the correct password they are logged in and a sessionID is returned by the core.
-Need the UI to capture and reimplement the tokens that the core generates.
-Need to better define user cache behaviour. 
 -I want it to stay in /var/www/html as a PHP file because it will be guaranteed to be on the local server.
 -In a multi-server installation it would make it a lot easier to control throughput geographically. 
 -We need a way to divide the userlist by geographic location and then sync user cache files between the DATA library and the local server serving the request.
 -I don't think it will be a problem to implement, so we can continue testing with the current cache environment for now.
 -Keep in mind if complexity gets too high that we still need to add more features.
-User log generation works.
-Added more Errors descriptions to Documentation\Error_Descriptions.txt.

----------
1/19/2021
v0.6.8 - Working on session control. Added user logging capability.

-The programmer now has the choice of adding logs and errors to a user directory of the Data library.
-Added a function for checking that a library is active.
-Added a function for securing sensitive memory after authentication.
-Roughed out a routine to pass authentication straight into session creation to remove the need for refresh.
 -Has bugs, blocks authentication now.
-Put our first piece of data into a library programmatically! 
-The user logs process should be a good rough draft for accessing & manipulating data within a library.

----------
v0.6.7 - 1/18/2021
Working on session creation & control.

-Now that the login procedure is done we need a way to hold onto a session without resending credentials every time.
-The verifyGlobals() function has changed a lot to accomodate this.
-There is not a verifySession() function which will take in a SessionID either from POST request or from SESSION variable and validate it.
-Sessions work like this...
 -A user submits a correct username / password combination and is given a SessionID.
 -The user navigates the application. Every time they load a page the SESSION ID and clienttoken is either posted in with their request or it is held in PHPs global SESSION variable.
 -The SessionID is validated against the users credentials and if it is authentic and not expired it is treated like a password.
 -Every time the user submits a request they are given another client token and sessionID.
 -Unique per-user Client tokens and SessionIDs are generated every 60 seconds.
 -Tokens are valid for a dynamic duration between 60 and 120 seconds, depending on when they submitted their last token.
 -If a user submits a valid ClientToken and SessionID they will not have to enter a password. 
-I have a thought about how to enable variable exiration durations on SessionIDs and ClientTokens but I want to get the core functionalit down first.
-The SessionID is a hash of the salts, userID, password, server token, and client token, and time. It is unique to every user.
-Moved the Dev_Notes text file to the new Documentation directory.

----------
v0.6.6 - 1/18/2021
Fixing bugs, adding documentation.

-Pruned authenticate() function. 
-Changed from implied token input to ClientTokenInput in authenticate() function.
-Add Documentation folder with Error_Descriptions.txt file declaring the errors HRCloud3 makes and what they mean.
-Not done adding errors, but the ones with well defined functinoality are present.
-Add more as error handling functionality is tested and becomes solidified.
-Added the first screenshot and Screenshots folder.

----------
v0.6.5 - 1/18/2021
Authentication is functional & encrypted!

-Authentication works now. It is fully encrypted.
-Worked out lots of bugs in the server-side authentication routine.
-Worked out bugs in token generation.
-Worked out bugs in library filtering, library data loading.
-Currently need to review user cache generation routine.
-Still wondering why borders disappeared in stylesheets.

----------
v0.6.4 - 1/16/2021
Username modal & token generation complete. Password modal just about done.

-Implemented client-side SHA256 hashing of the supplied password before sending anything over the wire.
-Figured out AJAX issues, JQuery not loading properly.
-Reorganized scripts.
-Labelled some DOM elements, structuring the UI.
-Improved comments, especially in Javascript & HTML files.
-Fixed bugs / naming convention issues in HRC3-Lib.js.
-Need to do...
 -Work out bugs in authentication routine.
 -Complete Password modal & UI sequence.
 -Polish stylesheets.
 -Draw an outline of what the UI & landing pages should look like.

----------
v0.6.3 - 1/15/2021
More authentication work.

-Working on the UI elements responsible for logging in.
-Using jQuery & Ajax for asynchronous callback.
-So far the username portion is all done. 
  -The user clicks Login and the modal appears. 
  -They are prompted for their username. 
  -The username modal has a hidden field to request a token.
  -They submit their username. The token request is also sent.
  -The username is set and a token is generated.
  -The token must be used within 1-2 minutes or it will expire.
-More work needs to be done.
  -The token can now be passed back with a password and username for authentication.
-Improve comments.
-Fix several bugs.
  -Return for checkVersions & loadCores functions were incorrect.
  -loadCores had bugs in the error checking procedure. It returned the wrong boolean and halted the core in all cases.
-Update jQuery from v3.1.0 to v3.5.1.
-Fix 404 errors
  -meyers-reset.css
  -favicon.ico
-Update HRC2-Lib.js.
  -Improve comments.
  -Improve code readability via segmentation.
  -Add GPL header text.
  -Rename to HRC3-Lib.js.

----------
v0.6.2 - 12/24/2020
Working on authentication procedure.

-Moved some stuff between files. 
-Had to figure out a mechanism for not throwing the login screen before a user has requested it.
-Had to figure out a file structure that would result in proper HTML syntax for UI elements but proper value-only returns for ajax calls.
-Added a conditional statement to skip a large section of the core when not enough information is supplied to authenticate a user. 
-Cleaned up stylesheets. 
-Renamed a few files.
-Put in some work on header.html file. HTML syntax is looking good. Login screens are looking good. 
-The main login.html page now functions to the extent that it generates a clienttoken for the specified user. Need to implement on login popup modal also.
-Need to implement async calls for retrieving the clienttoken from core when userinput and requesttokens post inputs are supplied. This way the clienttoken can be hashed client-side with the password input for stage 2 of the login procedure.
-Login procedure will be 2 stages. Username entry, Password entry.
-In the future it would make things more scalable if there were a dropdown for region/continent/country on the username entry field. That way we don't have to iterate through a massive worldwide user list for each login attempt. We could localize this to make things more secure and faster.
-Added version checking. The core will now verify that the compatibilityCore is enabled. If it is, the version from it will be checked against the version contained in versionInfo.php. If discrepancies are found execution will be halted and a descriptive error will be raied. If the versions match the engine will continue as normal. If for any reason the compatibilityCore is disabled, the check will be skipped completely.

----------
v0.6.1 - 12/24/2020
Merry Almost Xmas! More core work.

-Getting closer and closer to testing authentication.
-Implementing features revealed some missing components (like handing users prior to a login attempt).
-Improve code comment consistency.
-Found a couple typos.

----------
v0.6 - 12/23/2020
Fixed a lot of Syntax errors, working on UI

-Fixed a lot of syntax errors. 
-Working on testing authentication. 
-Working on UI.
-Create a "Console" element in the header UI to organize core.php output prior to displaying more UI elements.

----------
v0.5.6

-I have a bunch of notes and thoughts floating around about how to structure things that I need a consolidated place for it all.
-I wasted some time yesterday re-writing code that looked wrong, but turned out to be completely fine all along.
-The 'DATA' library will be for user-specific xPress dictionaries.
-Separate dictionaries per user are the best way to ensure privacy/security at the expense of compression performance.
-Encryption should utilize user-controlled keys.
-Special functions will need to be developed in dataCore for re-encrypting and verifying files when users change their encryption keys.
-Put some kind of limit on the mechanism for re-encrypting storage, as this poses a huge DDOS risk.